#!/usr/bin/env zsh
# -*- mode: sh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
#
# Original work Copyright (c) 2019-2020 Sebastian Gniazdowski
# Modified work Copyright (c) 2020-2021 Nicholas Serrano
# Modified work Copyright (c) 2022 zdharma-continuum and contributors
#

emulate -RL zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops nullglob
if [[ "$1" = plugin ]]; then
    local type="$1" user="$2" plugin="$3" id_as="$4" dir="${5#%}" hook="$6"
else
    local type="$1" url="$2" id_as="$3" dir="${4#%}" hook="$5"
fi
if (( ${+ICE[sbin]} )); then
    (( !OPTS[opt_-q,--quiet] )) && +zinit-message "{w} linkbin annex disabled due to {ice}sbin{rst} ice detected"
    return
fi
if (( ${+ICE[lbin]} )); then
    local lbin sym="-P"
    local -a lbins srcdst
    lbins=(${(s.;.)ICE[lbin]})
    (
        builtin cd -q "$dir" || return
        for lbin in $lbins ""; do
            [[ ${lbin[1]} = "!" ]] && sym="-s"
            if [[ -z $lbin && ${#lbins} -eq 0 ]] || [[ $lbin = "!" && ${#lbins} -eq 1 ]]; then
                local -a files
                integer i=0
                while [[ ! -f $files[1] && $i -lt 9 ]]; do
                    ((i++))
                    case $i in
                        (1) files=($dir/${id_as:t}(Nnon.))  ;;
                        (2) [[ -n $plugin ]] && files=($dir/$plugin(Nnon.))  ;;
                        (3) [[ -n $url ]] && files=($dir/${url:t}(Nnon.))  ;;
                        (4) files=($dir/*(*Nnon.:t))  ;;
                        (5) files=($dir/**/${id_as:t})  ;;
                        (6) [[ -n $plugin ]] && files=($dir/**/$plugin(Nnon.))  ;;
                        (7) [[ -n $url ]] && files=($dir/**/${url:t}(Nnon.))  ;;
                        (8) files=($dir/**/*(*Nnon.:t))  ;;
                        (9) +zinit-message "{w} linkbin annex ice did not find any executable files" ;;
                    esac
                done
                [[ $i -gt 8 ]] && break
                lbin=$files[1]
            else
                lbin=${lbin#!}
                [[ -z $lbin ]] && continue
            fi
            srcdst=(${(@s.->.)lbin})
            srcdst=("${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}")
            @zinit-substitute "srcdst[1]" "srcdst[2]"
            local -a fnames
            local fname
            eval "fnames=( ${srcdst[1]}(Nnon.) )"
            if (( !${#fnames} )); then
                +zinit-message "{e} linkbin annex ice {glob}$lbin{rst} did not match any files"
                continue
            fi
            for fname in $fnames; do
                srcdst[1]="$fname"
                local target_binary="${${(M)srcdst[1]:#/*}:-$dir/${srcdst[1]}}"
                local fnam="${srcdst[2]:-${srcdst[1]:t}}"
                local file="$ZPFX/bin/$fnam"
                command chmod +x "$target_binary"
                command ln -f "$sym" "$target_binary" "$file"
                if [[ -x $file ]]; then
                    if (( !OPTS[opt_-q,--quiet] )) && [[ -x $target_binary ]]; then
                        if [[ $hook == atclone-<-> ]] || [[ $ZINIT[annex-multi-flag:pull-active] -ge 2 ]]; then
                            +zinit-message "{m} linkbin annex ${${${hook:#*atclone-<->}:+re-c}:-c}reated {file}$fnam{rst} ${${${sym#-P}:+soft}:-hard} link and set +x on the {file}${target_binary:t}{rst} binary"
                        elif (( !OPTS[opt_-u,--urge] )) && [[ $hook == atclone-<-> || $ZINIT[annex-multi-flag:pull-active] -eq 1 ]]; then
                            +zinit-message "{w} linkbin annex ${${${hook:#*atclone-<->}:+re-c}:-c}reated {file}$fnam{rst} ${${${sym#-P}:+soft}:-hard} link, but the {file}${target_binary:t} binary does not exist or failed to set +x on it"
                        else
                            continue
                        fi
                    fi
                else
                    +zinit-message "{e} linkbin annex encountered unhandled error creating {obj}$fnam{error} link{rst}"
                fi
            done
        done
    )
fi
