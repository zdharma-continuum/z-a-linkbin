# Original work Copyright (c) 2019-2020 Sebastian Gniazdowski
# Modified work Copyright (c) 2020-2021 Nicholas Serrano
# Modified work Copyright (c) 2022 zdharma-continuum and contributors
#
#
# Original work Copyright (c) 2019-2020 Sebastian Gniazdowski
# Modified work Copyright (c) 2020-2021 Nicholas Serrano
# License MIT

emulate -RL zsh
setopt extendedglob warncreateglobal typesetsilent noshortloops nullglob

if [[ "$1" = plugin ]] {
    local type="$1" user="$2" plugin="$3" id_as="$4" dir="${5#%}" hook="$6"
} else {
    local type="$1" url="$2" id_as="$3" dir="${4#%}" hook="$5"
}

#
# lbin'' ice â€“ creation of links
#
 
if (( ${+ICE[lbin]} )) {
    (( ${+ICE[sbin]} )) && {
        (( !OPTS[opt_-q,--quiet] )) && \
        +zinit-message "{pre}linkbin annex: {ice}sbin{warn} ice detected, not doing anything...{rst}"
        return;
    }
    local -a lbins srcdst
    lbins=( ${(s.;.)ICE[lbin]} )

    local lbin sym="-P"

    (
        # CD for the globbing through eval
        builtin cd -q "$dir" || return

        for lbin ( $lbins "" ) {
            [[ ${lbin[1]} = "!" ]] && sym="-s"

            if [[ -z $lbin && ${#lbins} -eq 0 ]] || [[ $lbin = "!" && ${#lbins} -eq 1 ]] {
                local -a files
                integer i=0
                while [[ ! -f $files[1] && $i -lt 7 ]]; do
                    ((i++))
                    case $i in
                        (1) files=($dir/(*/)#*(.xNOL))  ;;
                        (2) [[ -n $plugin ]] && files=($dir/$plugin(Nnon.))  ;;
                        (3) [[ -n $plugin ]] && files=($dir/**/$plugin(Nnon.))  ;;
                        (4) [[ -n $url ]] && files=($dir/${url:t}(Nnon.))  ;;
                        (5) [[ -n $url ]] && files=($dir/**/${url:t}(Nnon.))  ;;
                        (6) files=($dir/(*/)#*(${id_as:t}|${id_as:h})*(.xNOL)) ;;
                        (7) +zi-log "{e} {b}linkbin{rst}: {ice}lbin{rst} ice did not detect any executable files" ;;
                    esac
                done
                [[ $i -gt 6 ]] && break
                lbin=$files[1]
            } else {
                lbin=${lbin#!}
                [[ -z $lbin ]] && continue
            }
            srcdst=( ${(@s.->.)lbin} )
            srcdst=( "${srcdst[@]//((#s)[[:space:]]##|[[:space:]]##(#e))/}" )

            @zinit-substitute 'srcdst[1]' 'srcdst[2]'

            local -a fnames
            local fname
            eval "fnames=( ${srcdst[1]}(Nnon.) )"

            if (( !${#fnames} )) {
                +zinit-message "{pre}linkbin annex: {error}The {ice}lbin{error} ice (\`{glob}$lbin{error}')didn't match any files{rst}"
                continue
            }

            for fname ( $fnames ) {
                srcdst[1]="$fname"

                local target_binary="${${(M)srcdst[1]:#/*}:-$dir/${srcdst[1]}}" fnam="${srcdst[2]:-${srcdst[1]:t}}"
                local file="$ZPFX/bin/$fnam"
                +zi-log "{dbg} file=$target_binary file=$file"

                local target_binary="${${(M)srcdst[1]:#/*}:-$dir/${srcdst[1]}}"
                if  [[ -z ${srcdst[2]:-''} ]] &&[[ ${target_binary:t} =~ ${id_as:t}* ]] || [[ ${target_binary:t} != ${srcdst[1]:t} ]]; then
                    +zi-log "{dbg} [[ -z ${srcdst[2]:-''} ]] && [[ ${target_binary:t} =~ ${id_as:t} ]] || [[ ${target_binary:t} != ${srcdst[1]:t} ]]"
                    +zi-log "{dbg} srcdst[2]=${id_as:t}"
                    srcdst[2]="${id_as:t}"
                fi
                if [[ -z ${srcdst[2]:-''} ]] && [[ ${target_binary:t} =~ ${id_as:h}* ]] || [[ ${target_binary:t} != ${srcdst[1]:t} ]]; then
                    +zi-log "{dbg} [[ -z ${srcdst[2]:-''} ]] && [[ ${target_binary:t} =~ ${id_as:h} ]] || [[ ${target_binary:t} != ${srcdst[1]:t} ]]"
                    +zi-log "{dbg} srcdst[2]=${id_as:h}"
                    srcdst[2]="${id_as:h}"
                fi
                local fnam="${srcdst[2]:-${srcdst[1]:t}}"
                local file="$ZPFX/bin/$fnam"
                +zi-log "{dbg} file=$fnam file=$file"

                command chmod +x "$target_binary"
                command ln -f "$sym" "$target_binary" "$file"

                if [[ -x $file ]]; then
                    (( !OPTS[opt_-q,--quiet] )) && \
                        if [[ -x $target_binary ]]; then
                            if [[ $hook == atclone-<-> || $ZINIT[annex-multi-flag:pull-active] -ge  2 ]] {
                                +zinit-message "{pre}linkbin annex: {msg}${${${hook:#*atclone-<->}:+Re-c}:-C}reated the {obj}$fnam{data2} ${${${sym#-P}:+soft}:-hard}{msg} link and set +x on the {obj}${target_binary:t}{msg} binary{rst}"
                            }
                        else
                            +zinit-message "{pre}linkbin annex: {error}${${${hook:#*atclone-<->}:+Re-c}:-C}reated the {obj}$fnam{data2} ${${${sym#-P}:+soft}:-hard}{error} link however the {obj}${target_binary:t}{error} binary does not exist or failed to set +x on it{rst}"
                        fi
                else
                    +zinit-message "{pre}linkbin annex: {error}Something went wrong creating the {obj}$fnam{error} link{rst}"
                fi
            }
        }
    )
}

# vim: set expandtab filetype=zsh shiftwidth=4 softtabstop=4 tabstop=4:
